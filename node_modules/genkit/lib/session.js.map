{"version":3,"sources":["../src/session.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GenerateOptions,\n  Message,\n  MessageData,\n  tagAsPreamble,\n} from '@genkit-ai/ai';\nimport { z } from '@genkit-ai/core';\nimport { AsyncLocalStorage } from 'node:async_hooks';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Chat, ChatOptions, MAIN_THREAD, PromptRenderOptions } from './chat';\nimport { Genkit } from './genkit';\n\nexport type BaseGenerateOptions<\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  CustomOptions extends z.ZodTypeAny = z.ZodTypeAny,\n> = Omit<GenerateOptions<O, CustomOptions>, 'prompt'>;\n\nexport interface SessionOptions<S = any> {\n  /** Session store implementation for persisting the session state. */\n  store?: SessionStore<S>;\n  /** Initial state of the session.  */\n  initialState?: S;\n  /** Custom session Id. */\n  sessionId?: string;\n}\n\n/**\n * Session encapsulates a statful execution environment for chat.\n * Chat session executed within a session in this environment will have acesss to\n * session session convesation history.\n *\n * ```ts\n * const ai = genkit({...});\n * const chat = ai.chat(); // create a Session\n * let response = await chat.send('hi'); // session/history aware conversation\n * response = await chat.send('tell me a story');\n * ```\n */\nexport class Session<S = any> {\n  readonly id: string;\n  private sessionData?: SessionData<S>;\n  private store: SessionStore<S>;\n\n  constructor(\n    readonly genkit: Genkit,\n    options?: {\n      id?: string;\n      stateSchema?: S;\n      sessionData?: SessionData<S>;\n      store?: SessionStore<S>;\n    }\n  ) {\n    this.id = options?.id ?? uuidv4();\n    this.sessionData = options?.sessionData ?? {\n      id: this.id,\n    };\n    if (!this.sessionData) {\n      this.sessionData = { id: this.id };\n    }\n    if (!this.sessionData.threads) {\n      this.sessionData!.threads = {};\n    }\n    this.store = options?.store ?? new InMemorySessionStore<S>();\n  }\n\n  get state(): S | undefined {\n    // We always get state from the parent. Parent session is the source of truth.\n    if (this.genkit instanceof Session) {\n      return this.genkit.state;\n    }\n    return this.sessionData!.state;\n  }\n\n  /**\n   * Update session state data.\n   */\n  async updateState(data: S): Promise<void> {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {} as SessionData<S>;\n    }\n    sessionData.state = data;\n    this.sessionData = sessionData;\n\n    await this.store.save(this.id, sessionData);\n  }\n\n  /**\n   * Update messages for a given thread.\n   */\n  async updateMessages(\n    thread: string,\n    messasges: MessageData[]\n  ): Promise<void> {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {} as SessionData<S>;\n    }\n    if (!sessionData.threads) {\n      sessionData.threads = {};\n    }\n    sessionData.threads[thread] = messasges;\n    this.sessionData = sessionData;\n\n    await this.store.save(this.id, sessionData);\n  }\n\n  /**\n   * Create a chat session with the provided options.\n   *\n   * ```ts\n   * const chat = ai.chat({\n   *   system: 'talk like a pirate',\n   * })\n   * let response = await chat.send('tell me a joke')\n   * response = await chat.send('another one')\n   * ```\n   */\n  chat<I>(options?: ChatOptions<I, S>): Chat;\n\n  /**\n   * Craete a separaete chat conversation (\"thread\") within the same session state.\n   *\n   * ```ts\n   * const lawyerChat = ai.chat('lawyerThread', {\n   *   system: 'talk like a lawyer',\n   * })\n   * const pirateChat = ai.chat('pirateThread', {\n   *   system: 'talk like a pirate',\n   * })\n   * await lawyerChat.send('tell me a joke')\n   * await pirateChat.send('tell me a joke')\n   * ```\n   */\n  chat<I>(threadName: string, options?: ChatOptions<I, S>): Chat;\n\n  chat<I>(\n    optionsOrThreadName?: ChatOptions<I, S> | string,\n    maybeOptions?: ChatOptions<I, S>\n  ): Chat {\n    return runWithSession(this, () => {\n      let options: ChatOptions<S> | undefined;\n      let threadName = MAIN_THREAD;\n      if (maybeOptions) {\n        threadName = optionsOrThreadName as string;\n        options = maybeOptions as ChatOptions<S>;\n      } else if (optionsOrThreadName) {\n        if (typeof optionsOrThreadName === 'string') {\n          threadName = optionsOrThreadName as string;\n        } else {\n          options = optionsOrThreadName as ChatOptions<S>;\n        }\n      }\n      let requestBase: Promise<BaseGenerateOptions>;\n      if (!!(options as PromptRenderOptions<I>)?.prompt?.render) {\n        const renderOptions = options as PromptRenderOptions<I>;\n        requestBase = renderOptions.prompt\n          .render({\n            input: renderOptions.input,\n          })\n          .then((rb) => {\n            return {\n              ...rb,\n              messages: tagAsPreamble(rb?.messages),\n            };\n          });\n      } else {\n        const baseOptions = { ...(options as BaseGenerateOptions) };\n        const messages: MessageData[] = [];\n        if (baseOptions.system) {\n          messages.push({\n            role: 'system',\n            content: Message.parseContent(baseOptions.system),\n          });\n        }\n        delete baseOptions.system;\n        if (baseOptions.messages) {\n          messages.push(...baseOptions.messages);\n        }\n        baseOptions.messages = tagAsPreamble(messages);\n\n        requestBase = Promise.resolve(baseOptions);\n      }\n      return new Chat(this, requestBase, {\n        thread: threadName,\n        id: this.id,\n        messages:\n          (this.sessionData?.threads &&\n            this.sessionData?.threads[threadName]) ??\n          [],\n      });\n    });\n  }\n\n  /**\n   * Executes provided function within this session context allowing calling\n   * `ai.currentSession().state`\n   */\n  run<O>(fn: () => O) {\n    return runWithSession(this, fn);\n  }\n\n  toJSON() {\n    return this.sessionData;\n  }\n}\n\nexport interface SessionData<S = any> {\n  id: string;\n  state?: S;\n  threads?: Record<string, MessageData[]>;\n}\n\nconst sessionAls = new AsyncLocalStorage<Session<any>>();\n\n/**\n * Executes provided function within the provided session state.\n */\nexport function runWithSession<S = any, O = any>(\n  session: Session<S>,\n  fn: () => O\n): O {\n  return sessionAls.run(session, fn);\n}\n\n/** Returns the current session. */\nexport function getCurrentSession<S = any>(): Session<S> | undefined {\n  return sessionAls.getStore();\n}\n\n/** Throw when session state errors occur, ex. missing state, etc. */\nexport class SessionError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n\n/** Session store persists session data such as state and chat messages. */\nexport interface SessionStore<S = any> {\n  get(sessionId: string): Promise<SessionData<S> | undefined>;\n\n  save(sessionId: string, data: Omit<SessionData<S>, 'id'>): Promise<void>;\n}\n\nexport function inMemorySessionStore() {\n  return new InMemorySessionStore();\n}\n\nclass InMemorySessionStore<S = any> implements SessionStore<S> {\n  private data: Record<string, SessionData<S>> = {};\n\n  async get(sessionId: string): Promise<SessionData<S> | undefined> {\n    return this.data[sessionId];\n  }\n\n  async save(sessionId: string, sessionData: SessionData<S>): Promise<void> {\n    this.data[sessionId] = sessionData;\n  }\n}\n"],"mappings":"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","names":["uuidv4"]}