import {
  __async,
  __spreadValues
} from "./chunk-WHKVXUH6.mjs";
import { JSONSchema7 } from "json-schema";
import { AsyncLocalStorage } from "node:async_hooks";
import { parseSchema } from "./schema.js";
import {
  SPAN_TYPE_ATTR,
  newTrace,
  setCustomMetadataAttributes
} from "./tracing.js";
import { Status, StatusCodes, StatusSchema } from "./statusTypes.js";
const GENKIT_SESSION_STATE_INPUT_KEY = "__genkit__sessionState";
function actionWithMiddleware(action2, middleware) {
  const wrapped = (req) => __async(this, null, function* () {
    const dispatch = (index, req2) => __async(this, null, function* () {
      if (index === middleware.length) {
        return yield action2(req2);
      }
      const currentMiddleware = middleware[index];
      return currentMiddleware(
        req2,
        (modifiedReq) => __async(this, null, function* () {
          return dispatch(index + 1, modifiedReq || req2);
        })
      );
    });
    return yield dispatch(0, req);
  });
  wrapped.__action = action2.__action;
  return wrapped;
}
function action(config, fn) {
  const actionName = typeof config.name === "string" ? config.name : `${config.name.pluginId}/${config.name.actionId}`;
  const actionFn = (input) => __async(this, null, function* () {
    let sessionStateData = void 0;
    if (input == null ? void 0 : input.hasOwnProperty(GENKIT_SESSION_STATE_INPUT_KEY)) {
      sessionStateData = input[GENKIT_SESSION_STATE_INPUT_KEY];
      input = __spreadValues({}, input);
      delete input[GENKIT_SESSION_STATE_INPUT_KEY];
    }
    input = parseSchema(input, {
      schema: config.inputSchema,
      jsonSchema: config.inputJsonSchema
    });
    let output = yield newTrace(
      {
        name: actionName,
        labels: {
          [SPAN_TYPE_ATTR]: "action"
        }
      },
      (metadata) => __async(this, null, function* () {
        metadata.name = actionName;
        metadata.input = input;
        if (sessionStateData) {
          input[GENKIT_SESSION_STATE_INPUT_KEY] = sessionStateData;
        }
        const output2 = yield fn(input);
        metadata.output = JSON.stringify(output2);
        return output2;
      })
    );
    output = parseSchema(output, {
      schema: config.outputSchema,
      jsonSchema: config.outputJsonSchema
    });
    return output;
  });
  actionFn.__action = {
    name: actionName,
    description: config.description,
    inputSchema: config.inputSchema,
    inputJsonSchema: config.inputJsonSchema,
    outputSchema: config.outputSchema,
    outputJsonSchema: config.outputJsonSchema,
    metadata: config.metadata
  };
  if (config.use) {
    return actionWithMiddleware(actionFn, config.use);
  }
  return actionFn;
}
function validateActionName(registry, name) {
  if (name.includes("/")) {
    validatePluginName(registry, name.split("/", 1)[0]);
    validateActionId(name.substring(name.indexOf("/") + 1));
  }
  return name;
}
function validatePluginName(registry, pluginId) {
  if (!registry.lookupPlugin(pluginId)) {
    throw new Error(
      `Unable to find plugin name used in the action name: ${pluginId}`
    );
  }
  return pluginId;
}
function validateActionId(actionId) {
  if (actionId.includes("/")) {
    throw new Error(`Action name must not include slashes (/): ${actionId}`);
  }
  return actionId;
}
function defineAction(registry, config, fn) {
  if (isInRuntimeContext()) {
    throw new Error(
      "Cannot define new actions at runtime.\nSee: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md"
    );
  }
  if (typeof config.name === "string") {
    validateActionName(registry, config.name);
  } else {
    validateActionId(config.name.actionId);
  }
  const act = action(config, (i) => __async(this, null, function* () {
    setCustomMetadataAttributes({ subtype: config.actionType });
    yield registry.initializeAllPlugins();
    return yield runInActionRuntimeContext(() => fn(i));
  }));
  act.__action.actionType = config.actionType;
  registry.registerAction(config.actionType, act);
  return act;
}
const streamingAls = new AsyncLocalStorage();
const sentinelNoopCallback = () => null;
function runWithStreamingCallback(streamingCallback, fn) {
  return streamingAls.run(streamingCallback || sentinelNoopCallback, fn);
}
function getStreamingCallback() {
  const cb = streamingAls.getStore();
  if (cb === sentinelNoopCallback) {
    return void 0;
  }
  return cb;
}
const runtimeCtxAls = new AsyncLocalStorage();
function isInRuntimeContext() {
  return !!runtimeCtxAls.getStore();
}
function runInActionRuntimeContext(fn) {
  return runtimeCtxAls.run("runtime", fn);
}
export {
  GENKIT_SESSION_STATE_INPUT_KEY,
  JSONSchema7,
  Status,
  StatusCodes,
  StatusSchema,
  action,
  actionWithMiddleware,
  defineAction,
  getStreamingCallback,
  isInRuntimeContext,
  runInActionRuntimeContext,
  runWithStreamingCallback
};
//# sourceMappingURL=action.mjs.map