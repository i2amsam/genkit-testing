import { Registry } from '@genkit-ai/core/registry';
import { GenerateResponseChunk } from '../generate/chunk.js';
import { GenerateResponse } from '../generate/response.js';
import { ModelRequest } from '../model.js';
import * as zod from 'zod';
import { Formatter } from './types.d.js';
import '../message.js';
import '@genkit-ai/core';

declare function defineFormat(registry: Registry, options: {
    name: string;
} & Formatter['config'], handler: Formatter['handler']): {
    config: {
        contentType?: string | undefined;
        format?: "text" | "media" | "json" | undefined;
        schema?: Record<string, any> | undefined;
        constrained?: boolean | undefined;
    };
    handler: (req: ModelRequest<zod.ZodTypeAny>) => {
        parseResponse(response: GenerateResponse<unknown>): unknown;
        parseChunk?: ((chunk: GenerateResponseChunk<unknown>, cursor?: any) => unknown) | undefined;
        instructions?: string | ({
            text: string;
            custom?: Record<string, unknown> | undefined;
            media?: undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
            metadata?: Record<string, unknown> | undefined;
        } | {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            custom?: Record<string, unknown> | undefined;
            text?: undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
            metadata?: Record<string, unknown> | undefined;
        } | {
            toolRequest: {
                name: string;
                ref?: string | undefined;
                input?: unknown;
            };
            custom?: Record<string, unknown> | undefined;
            text?: undefined;
            media?: undefined;
            toolResponse?: undefined;
            data?: unknown;
            metadata?: Record<string, unknown> | undefined;
        } | {
            toolResponse: {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            };
            custom?: Record<string, unknown> | undefined;
            text?: undefined;
            media?: undefined;
            toolRequest?: undefined;
            data?: unknown;
            metadata?: Record<string, unknown> | undefined;
        } | {
            custom?: Record<string, unknown> | undefined;
            text?: undefined;
            media?: undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
            metadata?: Record<string, unknown> | undefined;
        } | {
            custom: Record<string, any>;
            text?: undefined;
            media?: undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
            metadata?: Record<string, unknown> | undefined;
        })[] | undefined;
    };
};
type FormatArgument = keyof typeof DEFAULT_FORMATS | Formatter | Omit<string, keyof typeof DEFAULT_FORMATS>;
declare function resolveFormat(registry: Registry, arg: FormatArgument): Promise<Formatter | undefined>;
declare const DEFAULT_FORMATS: Formatter<any, any>[];
/**
 * initializeFormats registers the default built-in formats on a registry.
 */
declare function initializeFormats(registry: Registry): void;

export { DEFAULT_FORMATS, type FormatArgument, defineFormat, initializeFormats, resolveFormat };
