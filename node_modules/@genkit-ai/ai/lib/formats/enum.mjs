import "../chunk-7LUMLJGI.mjs";
import { GenkitError } from "@genkit-ai/core";
const enumFormatter = {
  name: "enum",
  config: {
    contentType: "text/plain",
    constrained: true
  },
  handler: (request) => {
    var _a, _b, _c, _d, _e, _f;
    const schemaType = (_b = (_a = request.output) == null ? void 0 : _a.schema) == null ? void 0 : _b.type;
    if (schemaType && schemaType !== "string" && schemaType !== "enum") {
      throw new GenkitError({
        status: "INVALID_ARGUMENT",
        message: `Must supply a 'string' or 'enum' schema type when using the enum parser format.`
      });
    }
    let instructions;
    if ((_d = (_c = request.output) == null ? void 0 : _c.schema) == null ? void 0 : _d.enum) {
      instructions = `Output should be ONLY one of the following enum values. Do not output any additional information or add quotes.

${(_f = (_e = request.output) == null ? void 0 : _e.schema) == null ? void 0 : _f.enum.map((v) => v.toString()).join("\n")}`;
    }
    return {
      parseResponse: (response) => {
        return response.text.trim();
      },
      instructions
    };
  }
};
export {
  enumFormatter
};
//# sourceMappingURL=enum.mjs.map