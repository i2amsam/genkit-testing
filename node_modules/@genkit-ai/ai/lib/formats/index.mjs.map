{"version":3,"sources":["../../src/formats/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Registry } from '@genkit-ai/core/registry';\nimport { arrayFormatter } from './array';\nimport { enumFormatter } from './enum';\nimport { jsonFormatter } from './json';\nimport { jsonlFormatter } from './jsonl';\nimport { textFormatter } from './text';\nimport { Formatter } from './types';\n\nexport function defineFormat(\n  registry: Registry,\n  options: { name: string } & Formatter['config'],\n  handler: Formatter['handler']\n) {\n  const { name, ...config } = options;\n  const formatter = { config, handler };\n  registry.registerValue('format', name, formatter);\n  return formatter;\n}\n\nexport type FormatArgument =\n  | keyof typeof DEFAULT_FORMATS\n  | Formatter\n  | Omit<string, keyof typeof DEFAULT_FORMATS>;\n\nexport async function resolveFormat(\n  registry: Registry,\n  arg: FormatArgument\n): Promise<Formatter | undefined> {\n  if (typeof arg === 'string') {\n    return registry.lookupValue<Formatter>('format', arg);\n  }\n  return arg as Formatter;\n}\n\nexport const DEFAULT_FORMATS: Formatter<any, any>[] = [\n  jsonFormatter,\n  arrayFormatter,\n  textFormatter,\n  enumFormatter,\n  jsonlFormatter,\n];\n\n/**\n * initializeFormats registers the default built-in formats on a registry.\n */\nexport function initializeFormats(registry: Registry) {\n  for (const format of DEFAULT_FORMATS) {\n    defineFormat(\n      registry,\n      { name: format.name, ...format.config },\n      format.handler\n    );\n  }\n}\n"],"mappings":";;;;;AAiBA,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB;AAC9B,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAGvB,SAAS,aACd,UACA,SACA,SACA;AACA,QAA4B,cAApB,OA7BV,IA6B8B,IAAX,mBAAW,IAAX,CAAT;AACR,QAAM,YAAY,EAAE,QAAQ,QAAQ;AACpC,WAAS,cAAc,UAAU,MAAM,SAAS;AAChD,SAAO;AACT;AAOA,SAAsB,cACpB,UACA,KACgC;AAAA;AAChC,QAAI,OAAO,QAAQ,UAAU;AAC3B,aAAO,SAAS,YAAuB,UAAU,GAAG;AAAA,IACtD;AACA,WAAO;AAAA,EACT;AAAA;AAEO,MAAM,kBAAyC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAKO,SAAS,kBAAkB,UAAoB;AACpD,aAAW,UAAU,iBAAiB;AACpC;AAAA,MACE;AAAA,MACA,iBAAE,MAAM,OAAO,QAAS,OAAO;AAAA,MAC/B,OAAO;AAAA,IACT;AAAA,EACF;AACF;","names":[]}