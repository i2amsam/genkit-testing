{"version":3,"sources":["../../src/formats/enum.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenkitError } from '@genkit-ai/core';\nimport type { Formatter } from './types';\n\nexport const enumFormatter: Formatter<string, string> = {\n  name: 'enum',\n  config: {\n    contentType: 'text/plain',\n    constrained: true,\n  },\n  handler: (request) => {\n    const schemaType = request.output?.schema?.type;\n    if (schemaType && schemaType !== 'string' && schemaType !== 'enum') {\n      throw new GenkitError({\n        status: 'INVALID_ARGUMENT',\n        message: `Must supply a 'string' or 'enum' schema type when using the enum parser format.`,\n      });\n    }\n\n    let instructions: string | undefined;\n    if (request.output?.schema?.enum) {\n      instructions = `Output should be ONLY one of the following enum values. Do not output any additional information or add quotes.\\n\\n${request.output?.schema?.enum.map((v) => v.toString()).join('\\n')}`;\n    }\n\n    return {\n      parseResponse: (response) => {\n        return response.text.trim();\n      },\n      instructions,\n    };\n  },\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAA4B;AAGrB,MAAM,gBAA2C;AAAA,EACtD,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,aAAa;AAAA,IACb,aAAa;AAAA,EACf;AAAA,EACA,SAAS,CAAC,YAAY;AAzBxB;AA0BI,UAAM,cAAa,mBAAQ,WAAR,mBAAgB,WAAhB,mBAAwB;AAC3C,QAAI,cAAc,eAAe,YAAY,eAAe,QAAQ;AAClE,YAAM,IAAI,wBAAY;AAAA,QACpB,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI;AACJ,SAAI,mBAAQ,WAAR,mBAAgB,WAAhB,mBAAwB,MAAM;AAChC,qBAAe;AAAA;AAAA,GAAsH,mBAAQ,WAAR,mBAAgB,WAAhB,mBAAwB,KAAK,IAAI,CAAC,MAAM,EAAE,SAAS,GAAG,KAAK,KAAK;AAAA,IACvM;AAEA,WAAO;AAAA,MACL,eAAe,CAAC,aAAa;AAC3B,eAAO,SAAS,KAAK,KAAK;AAAA,MAC5B;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;","names":[]}