"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var formats_exports = {};
__export(formats_exports, {
  DEFAULT_FORMATS: () => DEFAULT_FORMATS,
  defineFormat: () => defineFormat,
  initializeFormats: () => initializeFormats,
  resolveFormat: () => resolveFormat
});
module.exports = __toCommonJS(formats_exports);
var import_array = require("./array");
var import_enum = require("./enum");
var import_json = require("./json");
var import_jsonl = require("./jsonl");
var import_text = require("./text");
function defineFormat(registry, options, handler) {
  const _a = options, { name } = _a, config = __objRest(_a, ["name"]);
  const formatter = { config, handler };
  registry.registerValue("format", name, formatter);
  return formatter;
}
function resolveFormat(registry, arg) {
  return __async(this, null, function* () {
    if (typeof arg === "string") {
      return registry.lookupValue("format", arg);
    }
    return arg;
  });
}
const DEFAULT_FORMATS = [
  import_json.jsonFormatter,
  import_array.arrayFormatter,
  import_text.textFormatter,
  import_enum.enumFormatter,
  import_jsonl.jsonlFormatter
];
function initializeFormats(registry) {
  for (const format of DEFAULT_FORMATS) {
    defineFormat(
      registry,
      __spreadValues({ name: format.name }, format.config),
      format.handler
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_FORMATS,
  defineFormat,
  initializeFormats,
  resolveFormat
});
//# sourceMappingURL=index.js.map